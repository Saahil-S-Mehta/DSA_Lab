#include <stdio.h>
struct node
{
    int data;
    struct node *right;
    struct node *left;
};
typedef struct node * NODE;
NODE createBST(NODE root, int item)
{
    NODE temp, curr, prev;
    temp = (NODE) malloc(sizeof(struct node));
    temp->data = item;
    temp->left = NULL;
    temp->right = NULL;
    if(root==NULL)
    return temp;
    prev = NULL;
    curr = root;
    while(curr!=NULL)
    {
        prev = curr;
        if(item<curr->data)
        curr = curr->left;
        else
        curr = curr->right;
    }
    if(prev->data>item)
    prev->left = temp;
    else
    prev->right = temp;
    return root;
}
NODE inordersuccessor(NODE root)
{
    NODE curr = root;
    while(curr->left!=NULL)
    curr = curr->left;
    return curr;
}
NODE deletenode(NODE root, int key)
{
    NODE temp;
    if(root==NULL)
    return NULL;
    if(key<root->data)
    root->left = deletenode(root->left,key);
    else if(key>root->data)
    root->right = deletenode(root->right,key);
    else
    {
        if(root->left==NULL)
        {
            temp = root->right;
            free(root);
            return temp;
        }
        if(root->right==NULL)
        {
            temp = root->left;
            free(root);
            return temp;
        }
        temp = inordersuccessor(root->right);
        printf("\n%d", root->data);
        root->data = temp->data;
        root->right = deletenode(root->right,temp->data);
    }
    return root;
}
void preorder(NODE root)
{
    if(root!=NULL)
    {
        printf("%d\t", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(NODE root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d\t", root->data);
        inorder(root->right);
    }
}
void postorder(NODE root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d\t", root->data);
    }
}
int main()
{
    NODE root = NULL;
    int ch, key, item;
    for(;;)
    {
        printf("\n1. Insert");
        printf("\n2. Delete");
        printf("\n3. Preorder");
        printf("\n4. Inorder");
        printf("\n5. Postorder");
        printf("\nRead Choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("\nRead Element to begin\n");
            scanf("%d", &item);
            root = createBST(root, item);
            break;
            case 2: printf("\nRead Node to be deleted");
            scanf("%d", &key);
            root = deletenode(root,key);
            break;
            case 3: printf("\nPreorder\n");
            preorder(root);
            break;
            case 4: printf("\Inorder\n");
            inorder(root);
            break;
            case 5: printf("\nPostorder\n");
            postorder(root);
            break;
            default: exit(0);
            break;
        }
    }
    return 0;
}